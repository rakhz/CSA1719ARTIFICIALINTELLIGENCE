# Winning conditions for tic-tac-toe
winning_conditions = [
    [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows
    [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns
    [0, 4, 8], [2, 4, 6]              # Diagonals
]

def alpha_beta_pruning(board, depth, alpha, beta, maximizing_player):
    if check_win(board, 'X'):
        return -10
    elif check_win(board, 'O'):
        return 20
    elif depth == 3:
        return 3
    if maximizing_player:
        best_score = -float('inf')  # Initialize best_score with negative infinity
        for move in get_moves(board):
            new_board = make_move(board, move, 'O')  # Assume AI is playing 'O'
            score = alpha_beta_pruning(new_board, depth - 1, alpha, beta, False)
            best_score = max(best_score, score)
            alpha = max(alpha, best_score)
            if beta <= alpha:
                break
        return best_score

    else:
        best_score = float('inf')  # Initialize best_score with positive infinity
        for move in get_moves(board):
            new_board = make_move(board, move, 'X')  # Assume player is playing 'X'
            score = alpha_beta_pruning(new_board, depth - 1, alpha, beta, True)
            best_score = min(best_score, score)
            beta = min(beta, best_score)
            if beta <= alpha:
                break
        return best_score

# Function to check if the game is over
def check_win(board, player):
    for condition in winning_conditions:
        if board[condition[0]] == player and board[condition[1]] == player and board[condition[2]] == player:
            return True
    return False

# Function to get the player's move
def get_moves(board):
    moves = []
    for i in range(9):
        if board[i] == '-':
            moves.append(i)
    return moves

# Function to make a move
def make_move(board, move, player):
    new_board = board[:]
    new_board[move] = player
    return new_board

# Example usage
board = ['-' for _ in range(9)]  # Initialize an empty board
print(alpha_beta_pruning(board, 3, -float('inf'), float('inf'), True))  # Assuming AI is playing first, depth 3
