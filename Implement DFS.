class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, node, neighbors):
        self.graph[node] = neighbors

def dfs(graph, start_node, visited=None):
    if visited is None:
        visited = set()
    if start_node not in visited:
        print(start_node, end=" ")
        visited.add(start_node)
        for neighbor in graph.graph[start_node]:
            dfs(graph, neighbor, visited)

# Example Usage:
if __name__ == "__main__":
    # Create a graph
    my_graph = Graph()
    my_graph.add_edge('A', ['B', 'C'])
    my_graph.add_edge('B', ['A', 'D', 'E'])
    my_graph.add_edge('C', ['A', 'F', 'G'])
    my_graph.add_edge('D', ['B'])
    my_graph.add_edge('E', ['B', 'H'])
    my_graph.add_edge('F', ['C'])
    my_graph.add_edge('G', ['C'])
    my_graph.add_edge('H', ['E'])

    # Perform DFS starting from node 'A'
    print("DFS Traversal:")
    dfs(my_graph, 'A')
