import itertools

def tsp(graph):
    n = len(graph)
    memo = {}

    def tsp_helper(curr, remaining):
        if (curr, remaining) in memo:
            return memo[(curr, remaining)]

        if not remaining:
            return graph[curr][0]

        min_cost = float('inf')
        for next_node in remaining:
            new_remaining = tuple(node for node in remaining if node != next_node)
            cost = graph[curr][next_node] + tsp_helper(next_node, new_remaining)
            min_cost = min(min_cost, cost)

        memo[(curr, remaining)] = min_cost
        return min_cost

    return tsp_helper(0, tuple(range(1, n)))

# Example Usage:
if __name__ == "__main__":
    # Example graph represented as a 2D array (adjacency matrix)
    graph = [
        [0, 10, 15, 20],
        [10, 0, 35, 25],
        [15, 35, 0, 30],
        [20, 25, 30, 0]
    ]

    # Find the optimal TSP tour and its cost
    optimal_tour_cost = tsp(graph)
    print("Optimal TSP tour cost:", optimal_tour_cost)
