import heapq

def a_star(graph, start, goal):
    # Create a priority queue to store the nodes
    pq = []
    heapq.heappush(pq, (0, start))

    # Create a set to store the visited nodes
    visited = set()

    # Create a dictionary to store the parent of each node
    parent = {}

    # Create a dictionary to store the cost of each node
    cost = {}

    # Initialize the cost of the start node to 0
    cost[start] = 0

    while pq:
        # Get the node with the lowest cost from the priority queue
        current_cost, current_node = heapq.heappop(pq)

        # If the current node is the goal node, return the path
        if current_node == goal:
            path = []
            while current_node != start:
                path.append(current_node)
                current_node = parent[current_node]
            path.append(start)
            path.reverse()
            return path

        # Mark the current node as visited
        visited.add(current_node)

        # Get the neighbors of the current node
        neighbors = graph[current_node]

        # For each neighbor, calculate the tentative cost
        for neighbor in neighbors:
            tentative_cost = current_cost + graph[current_node][neighbor]

            # If the neighbor is not visited or the tentative cost is lower than the current cost, update the cost and parent
            if neighbor not in visited or tentative_cost < cost.get(neighbor, float('inf')):
                cost[neighbor] = tentative_cost
                parent[neighbor] = current_node
                heapq.heappush(pq, (tentative_cost, neighbor))

    # If no path is found, return None
    return None

# Example usage
graph = {
    'A': {'B': 10, 'C': 15},
    'B': {'A': 10, 'C': 35, 'D': 25},
    'C': {'A': 15, 'B': 35, 'D': 30},
    'D': {'B': 25, 'C': 30, 'E': 5}
}

start = 'A'
goal = 'E'

path = a_star(graph, start, goal)

if path:
    print("Path from", start, "to", goal, "is:", path)
else:
    print("No path found from", start, "to", goal)
